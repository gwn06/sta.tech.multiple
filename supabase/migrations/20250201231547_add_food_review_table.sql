create table food_review (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  name text not null,
  slug text not null,
  price decimal not null,
  description text,
  image_url text not null,
  image_path text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  update_at timestamp with time zone default timezone('utc'::text, now()) not null
);


alter table food_review enable row level security;

create policy "Individuals can insert food review." on food_review for
    insert with check ((select auth.uid()) = user_id);

create policy "users can view reviews" on food_review for
    select using (auth.uid() is not null);

create policy "Individuals can update their own reviews." on food_review for
    update using ((select auth.uid()) = user_id);

create policy "Individuals can delete their own reviews." on food_review for
    delete using ((select auth.uid()) = user_id);


create table food_review_reviews (
  id bigint generated by default as identity primary key,
  food_review_id bigint references food_review not null,
  user_id uuid references auth.users not null,
  review text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  update_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table food_review_reviews enable row level security;

create policy "Individuals can upload images." on food_review_reviews for
    insert with check ((select auth.uid()) = user_id);

create policy "users can view reviews" on food_review_reviews for
    select using (auth.uid() is not null);

create policy "Individuals can update their own reviews." on food_review_reviews for
    update using ((select auth.uid()) = user_id);

create policy "Individuals can delete their own reviews." on food_review_reviews for
    delete using ((select auth.uid()) = user_id);


CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc', now());  
    RETURN NEW;
END;
$$
 LANGUAGE plpgsql;


CREATE TRIGGER update_updated_at_food_review
BEFORE UPDATE ON food_review
FOR EACH ROW EXECUTE PROCEDURE public.update_updated_at_column();

CREATE TRIGGER update_updated_at_food_review_reviews
BEFORE UPDATE ON food_review_reviews
FOR EACH ROW EXECUTE PROCEDURE public.update_updated_at_column();
